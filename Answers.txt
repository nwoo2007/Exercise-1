------------------
Lesson 1 Exercises
------------------

1. Define the follow terms in a way you understand:
  a. Top Down Development

The process of developing an application by breaking it down into subtasks (functions), and then coding those subtasks (define the functions).

  b. Procedural Abstraction

Making a function/method work in general by adding parameters. E.g. A function that adds 2 + 4 versus a function that can add any two numbers, provided via arguments.

  c. Call (as in function call)

A function call, or invocation, is the process of using a function.  E.g. showMenu() invokes the showMenu function.

  d. Method Declaration

The first line in a function definition. E.g. function addPoints(pts)

  e. Method Body

The code section of a function/method. I.e. This is the stuff between the { }.

  f. Local Scope

Any variable declared inside a code block { } has local scope inside that block. It does not exist outside of that block.

  g. Argument

Data provided when calling/invoking a function. E.g. addNumbers(5, 10);

  h. Parameter

The function variable(s) where arguments get stored. E.g. function addNumbers(x, y)

2. Write some code that declares 2 variables that have different scopes.

Below, x has a global scope and pi has a local or method scope (it only exists in the function)

let x = 8;

function pi() {
  var pi = 3.14
}


3. Write method declarations for the following:
  a. A method called salutations that has no parameters.

  function salutations()

  b. A method called getTaxRate that takes a province as a parameter.

  function getTaxRate(prov)

  c. A method called cylVolume that shows the volume of a cylinder, given the height and radius of the base.

  function cylVolume(h, r)

4. Can two functions have the same name in JavaScript? Explain how or why not.

  No. JavaScript will always use the last function definition, if that same function name is used more than once.

E.g.

greet();  // prints 'hello'

function greet(){
  console.log('hi');
}

function greet(){
  console.log('hello');
}

5. Write a program that contains 3 method calls to addRoof(), addBase() and addWalk() to produce the image 'house.PNG' located in the files for this replit.

  See script.js

6. The following formulas can be used to convert English units of measurements to metric units:
  inches * 2.54 = centimeters
  feet * 30 = centimeters
  yards * 0.91 = meters
  miles * 1.6 = kilometers

  Create a Metric Conversion application that displays a menu of conversion choices and then prompts the user to choose a conversion. Conversion choices should include inches to centimeters, feet to centimeters, yards to meters, miles to kilometers, and vice versa. The application should include separate functions for each conversion. See the image 'metricConversion.PNG' for an example of the output.

  see script.js

7. Create an IsoTriangle application that prompts the user for the size of an isosceles triangle and then displays the triangle with that many lines. The IsoTriangle application code should include:
    • the drawBar() method from the chapter.
    • An addSpaces() method which “prints” spaces.
  Application output should look similar to the image 'isoTriangle.PNG'

  OMIT

8. Create a function called addUp that takes a number as an argument. Add up all the numbers from 1 to the number you passed to the function. For example, if the input is 4 then your function should output 10 because 1 + 2 + 3 + 4 = 10.

9. Write a function called countChar that takes a string and a letter and reports how many of that letter appears in the string. E.g. countChar('hello', 'l') will report 2 l's. Test this function 3 times.

10. Write a function called findString that takes two strings representing a phrase and a word. It should output whether the word is contained somewhere in the phrase.
  E.g. findString('The devil wears prada', 'evil') >> returns 'found evil'
  E.g. 
    let one = 'crazy owl'
    let two = 'cat'
    findString(one, two) >> returns 'Did not find cat'



11. BONUS CHALLENGE (only allowed to use charAt, no other helpful library functions)

Write a function that takes a string version of a number and outputs that number, but with all leading and trailing zeros removed. E.g. '00003.1400' would output '3.14'